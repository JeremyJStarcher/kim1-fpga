ca65 V2.18 - Ubuntu 2.19-1
Main file   : timertest.s
Current file: timertest.s

000000r 1               TESTID = $01
000000r 1               POINTL = $10
000000r 1               POINTH = $11
000000r 1               TMPA = $12
000000r 1               TMPX = $13
000000r 1               TMPY = $14
000000r 1               ATIME = $15 ; Actual time
000000r 1               ASTAT = $16 ; Actual status
000000r 1               ETIME = $17 ; Expected time
000000r 1               ESTAT = $18 ; Expected status
000000r 1               TEST_RESULT = $19;
000000r 1               FINAL_RESULT = $20;
000000r 1               
000000r 1               
000000r 1                       .ORG $0200
000200  1               
000200  1               
000200  1               ; The 'USER' timers
000200  1               T0001 = $1704
000200  1               T0008 = $1705
000200  1               T0064 = $1706
000200  1               T1024 = $1707
000200  1               TSTATUS = $1707
000200  1               TREAD_TIME = $1706
000200  1               
000200  1               ; The 'SYSTEM' timers
000200  1               ;T0001 = $1744
000200  1               ;T0008 = $1745
000200  1               ;T0064 = $1746
000200  1               ;T1024 = $1747
000200  1               
000200  1               TI0001 = T0001 +8
000200  1               TI0008 = T0008 +8
000200  1               TI0064 = T0064 +8
000200  1               TI1024 = T1024 +8
000200  1               
000200  1               
000200  1               ;TSTATUS = $1747
000200  1               ;TREAD_TIME = $1746
000200  1               
000200  1               SAD = $1740 ; character to output
000200  1               SBD = $1742 ; segment to output data
000200  1               PADD = $1741 ; 6530 RIOT data direction
000200  1               
000200  1               
000200  1               ; ROM ROUTINES
000200  1               OUTCH = $1EA0
000200  1               PRTBYT = $1E3B ; byte in A register
000200  1               CRLF = $1E2F
000200  1               OUTSP = $1E9E
000200  1               GETKEY = $1F6A
000200  1               
000200  1               .macro pushall
000200  1                       ; non-destructive push-all to boot
000200  1                       sta TMPA
000200  1               
000200  1                       PHA
000200  1                       TYA
000200  1                       PHA
000200  1                       TXA
000200  1                       PHA
000200  1               
000200  1                       lda TMPA
000200  1               .endmacro
000200  1               
000200  1               .macro pullall
000200  1                       PLA
000200  1                       TAX
000200  1                       PLA
000200  1                       TAY
000200  1                       PLA
000200  1               .endmacro
000200  1               
000200  1               .macro end_test  arg1, arg2, arg3
000200  1               .scope
000200  1                       LDA TSTATUS
000200  1                       LDY TREAD_TIME
000200  1               
000200  1                       STA ASTAT
000200  1                       STY ATIME
000200  1               
000200  1                       LDA #arg2
000200  1                       STA ESTAT
000200  1                       LDA #arg3
000200  1                       STA ETIME
000200  1               
000200  1                       print_string arg1
000200  1                       JSR run_end_test
000200  1               .endscope
000200  1               .endmacro
000200  1               
000200  1               .macro print_string text
000200  1               .scope
000200  1                       jmp skip
000200  1               l:
000200  1                       .byte text
000200  1                       .byte 0
000200  1               skip:
000200  1                       pushall
000200  1                       LDA #<l
000200  1                       STA POINTL;
000200  1                       LDA #>l
000200  1                       STA POINTH
000200  1                       JSR OUT_STRING
000200  1                       pullall
000200  1               .endscope
000200  1               .endmacro
000200  1               
000200  1               ;;;;;;;;;;;;;;;;;;; MAIN ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000200  1               
000200  1  20 2F 1E             JSR CRLF
000203  1  20 2F 1E             JSR CRLF
000206  1               
000206  1  4C 1E 02 36          print_string "6530/6532 TIMER TEST"
00020A  1  35 33 30 2F  
00020E  1  36 35 33 32  
000237  1  20 2F 1E             JSR CRLF
00023A  1  4C 76 02 44          print_string "DEVELOPED AGAINT REAL HARDWARE USED TO TEST SIMULATIONS "
00023E  1  45 56 45 4C  
000242  1  4F 50 45 44  
00028F  1  4C A1 02 41          print_string "AND EMULATIONS"
000293  1  4E 44 20 45  
000297  1  4D 55 4C 41  
0002BA  1  20 2F 1E             JSR CRLF
0002BD  1  20 2F 1E             JSR CRLF
0002C0  1  20 2F 1E             JSR CRLF
0002C3  1               
0002C3  1  A9 00                LDA #$00
0002C5  1  85 01                STA TESTID
0002C7  1  85 20                STA FINAL_RESULT
0002C9  1               
0002C9  1               ;;;;;;;;;;;; TESTS START HERE
0002C9  1               
0002C9  1               ;;; T0001
0002C9  1               .scope
0002C9  1  20 4F 07             JSR PRINT_TEST_ID
0002CC  1  A9 00                LDA #$00
0002CE  1  8D 04 17             STA T0001
0002D1  1  AD 07 17 AC          end_test "T0001 - Starting at $00", $80, $F8
0002D5  1  06 17 85 16  
0002D9  1  84 15 A9 80  
00031A  1               .endscope
00031A  1               
00031A  1               .scope
00031A  1  20 4F 07             JSR PRINT_TEST_ID
00031D  1  A9 FF                LDA #$FF
00031F  1  8D 04 17             STA T0001
000322  1  EA                   NOP
000323  1  AD 07 17 AC          end_test "T0001 - BASIC COUNTDOWN", $00, $F5
000327  1  06 17 85 16  
00032B  1  84 15 A9 00  
00036C  1               .endscope
00036C  1               
00036C  1               .scope
00036C  1  20 4F 07             JSR PRINT_TEST_ID
00036F  1  A9 01                LDA #$01
000371  1  8D 04 17             STA T0001
000374  1  EA                   NOP
000375  1  AD 07 17 AC          end_test "T0001 - BASIC COUNTDOWN (OVERFLOW)", $80, $F7
000379  1  06 17 85 16  
00037D  1  84 15 A9 80  
0003C9  1               .endscope
0003C9  1               
0003C9  1               .scope
0003C9  1  20 4F 07             JSR PRINT_TEST_ID
0003CC  1  A9 FF                LDA #$FF
0003CE  1  8D 0C 17             STA TI0001
0003D1  1  EA                   NOP
0003D2  1  AD 07 17 AC          end_test "TI0001 - BASIC COUNTDOWN", $00, $F5
0003D6  1  06 17 85 16  
0003DA  1  84 15 A9 00  
00041C  1               .endscope
00041C  1               
00041C  1               .scope
00041C  1  20 4F 07             JSR PRINT_TEST_ID
00041F  1  A9 01                LDA #$01
000421  1  8D 0C 17             STA TI0001
000424  1  EA                   NOP
000425  1  AD 07 17 AC          end_test "TI0001 - BASIC COUNTDOWN (OVERFLOW)", $80, $F7
000429  1  06 17 85 16  
00042D  1  84 15 A9 80  
00047A  1               .endscope
00047A  1               
00047A  1               
00047A  1               
00047A  1               ;;; T0008
00047A  1               .scope
00047A  1  20 4F 07             JSR PRINT_TEST_ID
00047D  1  A9 FF                LDA #$FF
00047F  1  8D 05 17             STA T0008
000482  1  EA                   NOP
000483  1  AD 07 17 AC          end_test "T0008 - BASIC COUNTDOWN", $00, $FD
000487  1  06 17 85 16  
00048B  1  84 15 A9 00  
0004CC  1               .endscope
0004CC  1               
0004CC  1               
0004CC  1               .scope
0004CC  1  20 4F 07             JSR PRINT_TEST_ID
0004CF  1  A9 FF                LDA #$FF
0004D1  1  8D 0D 17             STA TI0008
0004D4  1  EA                   NOP
0004D5  1  AD 07 17 AC          end_test "TI0008 - BASIC COUNTDOWN", $00, $FD
0004D9  1  06 17 85 16  
0004DD  1  84 15 A9 00  
00051F  1               .endscope
00051F  1               
00051F  1               .scope
00051F  1  20 4F 07             JSR PRINT_TEST_ID
000522  1  A9 01                LDA #$01
000524  1  8D 0D 17             STA TI0008
000527  1               
000527  1  EA EA EA EA          .repeat 20, I
00052B  1  EA EA EA EA  
00052F  1  EA EA EA EA  
00053B  1                               NOP
00053B  1                       .endrep
00053B  1               
00053B  1  AD 07 17 AC          end_test "TI0008 - BASIC COUNTDOWN (OVERFLOW)", $80, $D8
00053F  1  06 17 85 16  
000543  1  84 15 A9 80  
000590  1               .endscope
000590  1               
000590  1               
000590  1               ;;; T0064
000590  1               .scope
000590  1  20 4F 07             JSR PRINT_TEST_ID
000593  1  A9 FF                LDA #$FF
000595  1  8D 06 17             STA T0064
000598  1  EA                   NOP
000599  1  AD 07 17 AC          end_test "T0064 - BASIC COUNTDOWN", $00, $FE
00059D  1  06 17 85 16  
0005A1  1  84 15 A9 00  
0005E2  1               .endscope
0005E2  1               
0005E2  1               .scope
0005E2  1  20 4F 07             JSR PRINT_TEST_ID
0005E5  1  A9 01                LDA #$01
0005E7  1  8D 06 17             STA T0064
0005EA  1  20 E9 08             jsr long_delay
0005ED  1  AD 07 17 AC          end_test "T0064 - BASIC COUNTDOWN (OVERFLOW)", $80, $20
0005F1  1  06 17 85 16  
0005F5  1  84 15 A9 80  
000641  1               .endscope
000641  1               
000641  1               ;; T1024
000641  1               .scope
000641  1  20 4F 07             JSR PRINT_TEST_ID
000644  1  A9 FF                LDA #$FF
000646  1  8D 07 17             STA T1024
000649  1  EA                   NOP
00064A  1  AD 07 17 AC          end_test "T1024 - BASIC COUNTDOWN", $00, $FE
00064E  1  06 17 85 16  
000652  1  84 15 A9 00  
000693  1               .endscope
000693  1               
000693  1               .scope
000693  1  20 4F 07             JSR PRINT_TEST_ID
000696  1  A9 01                LDA #$1
000698  1  8D 07 17             STA T1024
00069B  1  20 E9 08             jsr long_delay
00069E  1  AD 07 17 AC          end_test "T1024 - BASIC COUNTDOWN  (OVERFLOW)", $80, $E0
0006A2  1  06 17 85 16  
0006A6  1  84 15 A9 80  
0006F3  1               .endscope
0006F3  1               
0006F3  1               
0006F3  1               .scope
0006F3  1  A5 20                lda FINAL_RESULT
0006F5  1  D0 2E                bne tests_passed
0006F7  1  4C 09 07 41          print_string "ALL TESTS PASS"
0006FB  1  4C 4C 20 54  
0006FF  1  45 53 54 53  
000722  1  4C 4E 07             jmp fin
000725  1               
000725  1               tests_passed:
000725  1  4C 35 07 54          print_string "TESTS FAILED"
000729  1  45 53 54 53  
00072D  1  20 46 41 49  
00074E  1               fin:
00074E  1  00                   brk
00074F  1               .endscope
00074F  1               
00074F  1               ;;;;; ROUTINES
00074F  1               
00074F  1               PRINT_TEST_ID:
00074F  1  4C 59 07 54          print_string "TEST #"
000753  1  45 53 54 20  
000757  1  23 00 85 12  
000772  1  A5 01                LDA TESTID
000774  1  20 3B 1E             JSR PRTBYT
000777  1  20 9E 1E             JSR OUTSP
00077A  1  E6 01                INC TESTID
00077C  1  60                   RTS
00077D  1               
00077D  1               
00077D  1               OUT_STRING:
00077D  1               .proc outstring
00077D  1  A0 00                LDY #$00
00077F  1               l1:
00077F  1  85 12 48 98          pushall
000783  1  48 8A 48 A5  
000787  1  12           
000788  1  B1 10                LDA (POINTL),Y
00078A  1  F0 0C                BEQ exit
00078C  1  20 A0 1E             JSR OUTCH
00078F  1  68 AA 68 A8          pullall
000793  1  68           
000794  1               
000794  1  C8                   INY
000795  1               
000795  1  4C 7F 07             JMP l1
000798  1               exit:
000798  1  68 AA 68 A8          pullall
00079C  1  68           
00079D  1  60                   RTS
00079E  1               .endproc
00079E  1               
00079E  1               
00079E  1               .proc run_end_test
00079E  1  85 12 48 98          pushall
0007A2  1  48 8A 48 A5  
0007A6  1  12           
0007A7  1  20 9E 1E             jsr OUTSP
0007AA  1               
0007AA  1  A5 16                lda ASTAT
0007AC  1  20 3B 1E             jsr PRTBYT
0007AF  1  20 9E 1E             jsr OUTSP
0007B2  1               
0007B2  1  A5 15                lda ATIME
0007B4  1  20 3B 1E             jsr PRTBYT
0007B7  1  20 9E 1E             jsr OUTSP
0007BA  1               
0007BA  1  68 AA 68 A8          pullall
0007BE  1  68           
0007BF  1               
0007BF  1                       ; Reset the test TEST_RESULT
0007BF  1  A9 00                lda #$00
0007C1  1  85 19                sta TEST_RESULT
0007C3  1               
0007C3  1  A5 16                LDA ASTAT
0007C5  1  C5 18                CMP ESTAT
0007C7  1  F0 4E                BEQ testtime
0007C9  1  4C D4 07 28          print_string "(ESTAT "
0007CD  1  45 53 54 41  
0007D1  1  54 20 00 8D  
0007EF  1  A5 18                LDA ESTAT
0007F1  1  20 3B 1E             jsr PRTBYT
0007F4  1  4C FA 07 29          print_string ") "
0007F8  1  20 00 8D 12  
0007FC  1  00 48 98 48  
000815  1  E6 19                inc TEST_RESULT
000817  1               
000817  1               testtime:
000817  1  A5 15                LDA ATIME
000819  1  C5 17                CMP ETIME
00081B  1  F0 4E                BEQ done
00081D  1  4C 28 08 28          print_string "(ETIME "
000821  1  45 54 49 4D  
000825  1  45 20 00 8D  
000843  1  A5 17                LDA ETIME
000845  1  20 3B 1E             jsr PRTBYT
000848  1  4C 4E 08 29          print_string ") "
00084C  1  20 00 8D 12  
000850  1  00 48 98 48  
000869  1               
000869  1  E6 19                inc TEST_RESULT
00086B  1               
00086B  1               done:
00086B  1  4C 77 08 52          print_string "RESULT: "
00086F  1  45 53 55 4C  
000873  1  54 3A 20 00  
000892  1  A5 19                LDA TEST_RESULT
000894  1  D0 27                BNE good
000896  1  4C 9F 08 50          print_string "PASS "
00089A  1  41 53 53 20  
00089E  1  00 8D 12 00  
0008BA  1  4C E5 08             jmp exit
0008BD  1               good:
0008BD  1  A9 01                lda #$01
0008BF  1  85 20                sta FINAL_RESULT
0008C1  1  4C CA 08 46          print_string "FAIL "
0008C5  1  41 49 4C 20  
0008C9  1  00 8D 12 00  
0008E5  1               exit:
0008E5  1  20 2F 1E             jsr CRLF
0008E8  1  60                   RTS
0008E9  1               .endproc
0008E9  1               
0008E9  1               .proc long_delay
0008E9  1               .scope
0008E9  1  A0 FF                LDY #$FF              ;MULTIPLY FACTOR
0008EB  1  A2 FF        DLY1:   LDX #$FF              ;DELAY TIME
0008ED  1  CA           DLY2:   DEX
0008EE  1  20 F7 08             JSR dummy
0008F1  1  D0 FA                BNE DLY2
0008F3  1  88                   DEY
0008F4  1  D0 F5                BNE DLY1
0008F6  1  60                   RTS
0008F7  1               
0008F7  1               ; Burn cycles calling this
0008F7  1               dummy:
0008F7  1  60                   RTS
0008F8  1               .endscope
0008F8  1               .endproc
0008F8  1               
0008F8  1               ; If the Z flag is 0, then A <> NUM and BNE will branch
0008F8  1               ; If the Z flag is 1, then A = NUM and BEQ will branch
0008F8  1               ; If the C flag is 0, then A (unsigned) < NUM (unsigned) and BCC will branch
0008F8  1               ; If the C flag is 1, then A (unsigned) >= NUM (unsigned) and BCS will branch
0008F8  1               
0008F8  1               
0008F8  1               ; Write Timer  RS  R/W  A4   A3  A2  A1  A0
0008F8  1               ;    1T         1    0   1  (a)   1   0   0
0008F8  1               ;    8T         1    0   1  (a)   1   0   1
0008F8  1               ;   64T         1    0   1  (a)   1   1   0
0008F8  1               ; 1024T         1    0   1  (a)   1   1   1
0008F8  1               
0008F8  1               ; Read Timer
0008F8  1               ;               1    1   -  (a)   1   -   1
0008F8  1               
0008F8  1               ; Read Interrupt Flags
0008F8  1               ;               1    1   -    -   1   -   1
0008F8  1               ; Write Edge Detect Control
0008F8  1               ;               1    0   0    -   1  (b) (c)
0008F8  1               
0008F8  1                ; (a) A3=0 disable interrupt from timer to IRQB
0008F8  1                ;     A3=1 to enable interrupt timer to IRQB
0008F8  1                ; (b) A1=0 to disable interrupt from PA7 to IRCB
0008F8  1                ;     A1=1 to enable interrupt from PA7 to IRCB
0008F8  1                ; (c)
0008F8  1                ; A0=0 for negative edge-detect
0008F8  1                ; A0=1 for positive edge-detect
0008F8  1               ; $1744 = 1011101000100 (PIN A4 is inverted on the schematic)
0008F8  1               
