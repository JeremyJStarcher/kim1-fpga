ca65 V2.18 - Ubuntu 2.19-1
Main file   : timertest.s
Current file: timertest.s

000000r 1               TESTID = $01
000000r 1               POINTL = $10
000000r 1               POINTH = $11
000000r 1               TMPA = $12
000000r 1               TMPX = $13
000000r 1               TMPY = $14
000000r 1               ATIME = $15 ; Actual time
000000r 1               ASTAT = $16 ; Actual status
000000r 1               ETIME = $17 ; Expected time
000000r 1               ESTAT = $18 ; Expected status
000000r 1               TEST_RESULT = $19;
000000r 1               FINAL_RESULT = $20;
000000r 1               
000000r 1               
000000r 1                       .ORG $0200
000200  1               
000200  1               
000200  1               ; The 'USER' timers
000200  1               T0001 = $1704
000200  1               T0008 = $1705
000200  1               T0064 = $1706
000200  1               T1024 = $1707
000200  1               TSTATUS = $1707
000200  1               TREAD_TIME = $1706
000200  1               
000200  1               ; The 'SYSTEM' timers
000200  1               ;T0001 = $1744
000200  1               ;T0008 = $1745
000200  1               ;T0064 = $1746
000200  1               ;T1024 = $1747
000200  1               
000200  1               TI0001 = T0001 +8
000200  1               TI0008 = T0008 +8
000200  1               TI0064 = T0064 +8
000200  1               TI1024 = T1024 +8
000200  1               
000200  1               
000200  1               ;TSTATUS = $1747
000200  1               ;TREAD_TIME = $1746
000200  1               
000200  1               SAD = $1740 ; character to output
000200  1               SBD = $1742 ; segment to output data
000200  1               PADD = $1741 ; 6530 RIOT data direction
000200  1               
000200  1               
000200  1               ; ROM ROUTINES
000200  1               OUTCH = $1EA0
000200  1               PRTBYT = $1E3B ; byte in A register
000200  1               CRLF = $1E2F
000200  1               OUTSP = $1E9E
000200  1               GETKEY = $1F6A
000200  1               
000200  1               .macro pushall
000200  1                       ; non-destructive push-all to boot
000200  1                       sta TMPA
000200  1               
000200  1                       PHA
000200  1                       TYA
000200  1                       PHA
000200  1                       TXA
000200  1                       PHA
000200  1               
000200  1                       lda TMPA
000200  1               .endmacro
000200  1               
000200  1               .macro pullall
000200  1                       PLA
000200  1                       TAX
000200  1                       PLA
000200  1                       TAY
000200  1                       PLA
000200  1               .endmacro
000200  1               
000200  1               .macro end_test  arg1, arg2, arg3
000200  1               .scope
000200  1                       LDA TSTATUS
000200  1                       LDY TREAD_TIME
000200  1               
000200  1                       STA ASTAT
000200  1                       STY ATIME
000200  1               
000200  1                       LDA #arg2
000200  1                       STA ESTAT
000200  1                       LDA #arg3
000200  1                       STA ETIME
000200  1               
000200  1                       print_string arg1
000200  1                       JSR run_end_test
000200  1               .endscope
000200  1               .endmacro
000200  1               
000200  1               .macro print_string text
000200  1               .scope
000200  1                       jmp skip
000200  1               l:
000200  1                       .byte text
000200  1                       .byte 0
000200  1               skip:
000200  1                       pushall
000200  1                       LDA #<l
000200  1                       STA POINTL;
000200  1                       LDA #>l
000200  1                       STA POINTH
000200  1                       JSR OUT_STRING
000200  1                       pullall
000200  1               .endscope
000200  1               .endmacro
000200  1               
000200  1               ;;;;;;;;;;;;;;;;;;; MAIN ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000200  1               
000200  1  20 2F 1E             JSR CRLF
000203  1  20 2F 1E             JSR CRLF
000206  1               
000206  1  4C 1E 02 36          print_string "6530/6532 TIMER TEST"
00020A  1  35 33 30 2F  
00020E  1  36 35 33 32  
000237  1  20 2F 1E             JSR CRLF
00023A  1  4C 76 02 44          print_string "DEVELOPED AGAINT REAL HARDWARE USED TO TEST SIMULATIONS "
00023E  1  45 56 45 4C  
000242  1  4F 50 45 44  
00028F  1  4C A1 02 41          print_string "AND EMULATIONS"
000293  1  4E 44 20 45  
000297  1  4D 55 4C 41  
0002BA  1  20 2F 1E             JSR CRLF
0002BD  1  20 2F 1E             JSR CRLF
0002C0  1  20 2F 1E             JSR CRLF
0002C3  1               
0002C3  1  A9 00                LDA #$00
0002C5  1  85 01                STA TESTID
0002C7  1  85 20                STA FINAL_RESULT
0002C9  1               
0002C9  1               ;;;;;;;;;;;; TESTS START HERE
0002C9  1               
0002C9  1               .scope
0002C9  1  20 2A 05             JSR PRINT_TEST_ID
0002CC  1  A9 FF                LDA #$FF
0002CE  1  8D 04 17             STA T0001
0002D1  1  EA                   NOP
0002D2  1  AD 07 17 AC          end_test "T0001 - BASIC COUNTDOWN", $00, $F5
0002D6  1  06 17 85 16  
0002DA  1  84 15 A9 00  
00031B  1               .endscope
00031B  1               
00031B  1               ;;;;;;;;;;;; TESTS START HERE
00031B  1               .scope
00031B  1  20 2A 05             JSR PRINT_TEST_ID
00031E  1  A9 01                LDA #$01
000320  1  8D 04 17             STA T0001
000323  1  EA                   NOP
000324  1  AD 07 17 AC          end_test "T0001 - BASIC COUNTDOWN (OVERFLOW)", $81, $F7
000328  1  06 17 85 16  
00032C  1  84 15 A9 81  
000378  1               .endscope
000378  1               
000378  1               .scope
000378  1  20 2A 05             JSR PRINT_TEST_ID
00037B  1  A9 FF                LDA #$FF
00037D  1  8D 0C 17             STA TI0001
000380  1  EA                   NOP
000381  1  AD 07 17 AC          end_test "TI0001 - BASIC COUNTDOWN", $00, $F5
000385  1  06 17 85 16  
000389  1  84 15 A9 00  
0003CB  1               .endscope
0003CB  1               
0003CB  1               .scope
0003CB  1  20 2A 05             JSR PRINT_TEST_ID
0003CE  1  A9 01                LDA #$01
0003D0  1  8D 0C 17             STA TI0001
0003D3  1  EA                   NOP
0003D4  1  AD 07 17 AC          end_test "TI0001 - BASIC COUNTDOWN (OVERFLOW)", $80, $F7
0003D8  1  06 17 85 16  
0003DC  1  84 15 A9 80  
000429  1               .endscope
000429  1               
000429  1               
000429  1               .scope
000429  1  20 2A 05             JSR PRINT_TEST_ID
00042C  1  A9 FF                LDA #$FF
00042E  1  8D 05 17             STA T0008
000431  1  EA                   NOP
000432  1  AD 07 17 AC          end_test "T0008 - BASIC COUNTDOWN", $00, $FD
000436  1  06 17 85 16  
00043A  1  84 15 A9 00  
00047B  1               .endscope
00047B  1               
00047B  1               
00047B  1               .scope
00047B  1  20 2A 05             JSR PRINT_TEST_ID
00047E  1  A9 FF                LDA #$FF
000480  1  8D 0D 17             STA TI0008
000483  1  EA                   NOP
000484  1  AD 07 17 AC          end_test "TI0008 - BASIC COUNTDOWN", $00, $FD
000488  1  06 17 85 16  
00048C  1  84 15 A9 00  
0004CE  1               .endscope
0004CE  1               
0004CE  1               .scope
0004CE  1  A5 20                lda FINAL_RESULT
0004D0  1  D0 2E                bne tests_passed
0004D2  1  4C E4 04 41          print_string "ALL TESTS PASS"
0004D6  1  4C 4C 20 54  
0004DA  1  45 53 54 53  
0004FD  1  4C 29 05             jmp fin
000500  1               
000500  1               tests_passed:
000500  1  4C 10 05 54          print_string "TESTS FAILED"
000504  1  45 53 54 53  
000508  1  20 46 41 49  
000529  1               fin:
000529  1  00                   brk
00052A  1               .endscope
00052A  1               
00052A  1               ;;;;; ROUTINES
00052A  1               
00052A  1               PRINT_TEST_ID:
00052A  1  4C 34 05 54          print_string "TEST #"
00052E  1  45 53 54 20  
000532  1  23 00 85 12  
00054D  1  A5 01                LDA TESTID
00054F  1  20 3B 1E             JSR PRTBYT
000552  1  20 9E 1E             JSR OUTSP
000555  1  E6 01                INC TESTID
000557  1  60                   RTS
000558  1               
000558  1               
000558  1               OUT_STRING:
000558  1               .proc outstring
000558  1  A0 00                LDY #$00
00055A  1               l1:
00055A  1  85 12 48 98          pushall
00055E  1  48 8A 48 A5  
000562  1  12           
000563  1  B1 10                LDA (POINTL),Y
000565  1  F0 0C                BEQ exit
000567  1  20 A0 1E             JSR OUTCH
00056A  1  68 AA 68 A8          pullall
00056E  1  68           
00056F  1               
00056F  1  C8                   INY
000570  1               
000570  1  4C 5A 05             JMP l1
000573  1               exit:
000573  1  68 AA 68 A8          pullall
000577  1  68           
000578  1  60                   RTS
000579  1               .endproc
000579  1               
000579  1               
000579  1               .proc run_end_test
000579  1  85 12 48 98          pushall
00057D  1  48 8A 48 A5  
000581  1  12           
000582  1  20 9E 1E             jsr OUTSP
000585  1               
000585  1  A5 16                lda ASTAT
000587  1  20 3B 1E             jsr PRTBYT
00058A  1  20 9E 1E             jsr OUTSP
00058D  1               
00058D  1  A5 15                lda ATIME
00058F  1  20 3B 1E             jsr PRTBYT
000592  1  20 9E 1E             jsr OUTSP
000595  1               
000595  1  68 AA 68 A8          pullall
000599  1  68           
00059A  1               
00059A  1                       ; Reset the test TEST_RESULT
00059A  1  A9 00                lda #$00
00059C  1  85 19                sta TEST_RESULT
00059E  1               
00059E  1  A5 16                LDA ASTAT
0005A0  1  C5 18                CMP ESTAT
0005A2  1  F0 4E                BEQ testtime
0005A4  1  4C AF 05 28          print_string "(ESTAT "
0005A8  1  45 53 54 41  
0005AC  1  54 20 00 8D  
0005CA  1  A5 18                LDA ESTAT
0005CC  1  20 3B 1E             jsr PRTBYT
0005CF  1  4C D5 05 29          print_string ") "
0005D3  1  20 00 8D 12  
0005D7  1  00 48 98 48  
0005F0  1  E6 19                inc TEST_RESULT
0005F2  1               
0005F2  1               testtime:
0005F2  1  A5 15                LDA ATIME
0005F4  1  C5 17                CMP ETIME
0005F6  1  F0 4E                BEQ done
0005F8  1  4C 03 06 28          print_string "(ETIME "
0005FC  1  45 54 49 4D  
000600  1  45 20 00 8D  
00061E  1  A5 17                LDA ETIME
000620  1  20 3B 1E             jsr PRTBYT
000623  1  4C 29 06 29          print_string ") "
000627  1  20 00 8D 12  
00062B  1  00 48 98 48  
000644  1               
000644  1  E6 19                inc TEST_RESULT
000646  1               
000646  1               done:
000646  1  4C 52 06 52          print_string "RESULT: "
00064A  1  45 53 55 4C  
00064E  1  54 3A 20 00  
00066D  1  A5 19                LDA TEST_RESULT
00066F  1  D0 27                BNE good
000671  1  4C 7A 06 50          print_string "PASS "
000675  1  41 53 53 20  
000679  1  00 8D 12 00  
000695  1  4C C0 06             jmp exit
000698  1               good:
000698  1  A9 01                lda #$01
00069A  1  85 20                sta FINAL_RESULT
00069C  1  4C A5 06 46          print_string "FAIL "
0006A0  1  41 49 4C 20  
0006A4  1  00 8D 12 00  
0006C0  1               exit:
0006C0  1  20 2F 1E             jsr CRLF
0006C3  1  60                   RTS
0006C4  1               .endproc
0006C4  1               
0006C4  1               ; If the Z flag is 0, then A <> NUM and BNE will branch
0006C4  1               ; If the Z flag is 1, then A = NUM and BEQ will branch
0006C4  1               ; If the C flag is 0, then A (unsigned) < NUM (unsigned) and BCC will branch
0006C4  1               ; If the C flag is 1, then A (unsigned) >= NUM (unsigned) and BCS will branch
0006C4  1               
0006C4  1               
0006C4  1               ; Write Timer  RS  R/W  A4   A3  A2  A1  A0
0006C4  1               ;    1T         1    0   1  (a)   1   0   0
0006C4  1               ;    8T         1    0   1  (a)   1   0   1
0006C4  1               ;   64T         1    0   1  (a)   1   1   0
0006C4  1               ; 1024T         1    0   1  (a)   1   1   1
0006C4  1               
0006C4  1               ; Read Timer
0006C4  1               ;               1    1   -  (a)   1   -   1
0006C4  1               
0006C4  1               ; Read Interrupt Flags
0006C4  1               ;               1    1   -    -   1   -   1
0006C4  1               ; Write Edge Detect Control
0006C4  1               ;               1    0   0    -   1  (b) (c)
0006C4  1               
0006C4  1                ; (a) A3=0 disable interrupt from timer to IRQB
0006C4  1                ;     A3=1 to enable interrupt timer to IRQB
0006C4  1                ; (b) A1=0 to disable interrupt from PA7 to IRCB
0006C4  1                ;     A1=1 to enable interrupt from PA7 to IRCB
0006C4  1                ; (c)
0006C4  1                ; A0=0 for negative edge-detect
0006C4  1                ; A0=1 for positive edge-detect
0006C4  1               ; $1744 = 1011101000100 (PIN A4 is inverted on the schematic)
0006C4  1               
